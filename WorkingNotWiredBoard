#include <esp_now.h>
#include <WiFi.h>

// Broadcast MAC (will receive from any beacon)  
uint8_t beacon_mac[] = {0x5C, 0x01, 0x3B, 0x74, 0x74, 0x1C}; // Broadcast mode

// Message structure (must match beacon)
typedef struct struct_message {
  char device_type[20];
  int beacon_id;
  unsigned long timestamp;
  int tx_power;
} struct_message;

struct_message incoming_data;

// RSSI calculation parameters
const float reference_rssi = -30.0; // RSSI at 1 meter (calibrate this for ESP-NOW)
const float path_loss_exponent = 2.0; // Adjust based on environment

// Variables for tracking
unsigned long last_packet_time = 0;
int packet_count = 0;
float rssi_sum = 0;
int rssi_readings = 0;

// Function to calculate distance from RSSI
float calculateDistance(int rssi) {
  if (rssi == 0) return -1.0;
  
  float ratio = (float)(reference_rssi - rssi) / (10.0 * path_loss_exponent);
  return pow(10, ratio);
}

// Function to get RSSI quality description
String getRSSIQuality(int rssi) {
  if (rssi > -30) return "Excellent";
  else if (rssi > -50) return "Very Good";
  else if (rssi > -60) return "Good";
  else if (rssi > -70) return "Fair";
  else if (rssi > -80) return "Weak";
  else return "Very Weak";
}

// Callback function that will be executed when data is received
void OnDataRecv(const esp_now_recv_info *recv_info, const uint8_t *incomingData, int len) {
  // Get RSSI from recv_info structure
  int rssi = recv_info->rx_ctrl->rssi;
  
  // Copy incoming data
  memcpy(&incoming_data, incomingData, sizeof(incoming_data));
  
  // Print sender MAC
  Serial.print("Packet from: ");
  for (int i = 0; i < 6; i++) {
    Serial.printf("%02X", recv_info->src_addr[i]);
    if (i < 5) Serial.print(":");
  }
  Serial.println();
  
  // Check if it's from our beacon
  if (strcmp(incoming_data.device_type, "BEACON") == 0) {
    packet_count++;
    last_packet_time = millis();
    
    // Calculate distance
    float distance = calculateDistance(rssi);
    
    // Add to running average
    rssi_sum += rssi;
    rssi_readings++;
    float avg_rssi = rssi_sum / rssi_readings;
    float avg_distance = calculateDistance(avg_rssi);
    
    Serial.println(">>> BEACON PACKET RECEIVED <<<");
    Serial.printf("Beacon ID: %d\n", incoming_data.beacon_id);
    Serial.printf("Beacon TX Power: %d dBm\n", incoming_data.tx_power);
    Serial.printf("Packet Timestamp: %lu ms\n", incoming_data.timestamp);
    Serial.printf("Current RSSI: %d dBm (%s)\n", rssi, getRSSIQuality(rssi).c_str());
    Serial.printf("Average RSSI: %.1f dBm (%d readings)\n", avg_rssi, rssi_readings);
    Serial.printf("Estimated Distance: %.2f meters\n", distance);
    Serial.printf("Average Distance: %.2f meters\n", avg_distance);
    Serial.printf("Total Packets: %d\n", packet_count);
    Serial.println("--------------------------------------------------");
    
    // Reset averages every 50 readings to adapt to movement
    if (rssi_readings >= 50) {
      rssi_sum = 0;
      rssi_readings = 0;
    }
    
    // Send acknowledgment back to beacon
    struct_message response;
    strcpy(response.device_type, "SCANNER_ACK");
    response.beacon_id = incoming_data.beacon_id;
    response.timestamp = millis();
    response.tx_power = rssi; // Send back the RSSI we measured
    
    esp_now_send(recv_info->src_addr, (uint8_t *) &response, sizeof(response));
  }
}

// Callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  // Uncomment for debugging
  // Serial.println(status == ESP_NOW_SEND_SUCCESS ? "ACK sent successfully" : "ACK send failed");
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("ESP32 ESP-NOW RSSI Scanner - Starting...");
  
  // Set device as a Wi-Fi Station and disconnect from any AP
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(100);
  
  // Print MAC address
  Serial.print("Scanner MAC Address: ");
  Serial.println(WiFi.macAddress());
  Serial.println("IMPORTANT: Copy this MAC address to the beacon code!");
  
  // Set maximum WiFi power for better reception
  WiFi.setTxPower(WIFI_POWER_19_5dBm);
  
  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  
  Serial.println("ESP-NOW initialized successfully");
  
  // Register callbacks
  esp_now_register_recv_cb(OnDataRecv);
  esp_now_register_send_cb(OnDataSent);
  
  Serial.println("Scanner ready - Listening for ANY beacon packets (broadcast mode)");
  Serial.println("No MAC address configuration needed in broadcast mode");
  Serial.println("Move the devices apart to test distance measurement");
  Serial.println("--------------------------------------------------");
}

void loop() {
  // Check for timeout (no packets received)
  if (last_packet_time > 0 && millis() - last_packet_time > 5000) {
    Serial.println("Warning: No beacon packets received for 5 seconds");
    Serial.println("Check if beacon is powered on and MAC addresses are correct");
    last_packet_time = 0; // Reset to avoid spam
  }
  
  delay(1000);
}
