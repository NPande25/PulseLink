#include <esp_now.h>
#include <WiFi.h>

// Replace with your scanner's MAC address
uint8_t scanner_mac[] = {0x5C, 0x01, 0x3B, 0x74, 0x46, 0x34}; // Update this!

// Message structure
typedef struct struct_message {
  char device_type[20];
  int beacon_id;
  unsigned long timestamp;
  int tx_power;
} struct_message;

struct_message beacon_data;
unsigned long last_send = 0;
const unsigned long send_interval = 1000; // Send every second

// Callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("Packet to ");
  for (int i = 0; i < 6; i++) {
    Serial.printf("%02X", mac_addr[i]);
    if (i < 5) Serial.print(":");
  }
  Serial.print(" - Status: ");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Success" : "Failed");
}

// Callback when data is received (for bidirectional communication)
void OnDataRecv(const esp_now_recv_info *recv_info, const uint8_t *incomingData, int len) {
  Serial.print("Received response from scanner: ");
  for (int i = 0; i < 6; i++) {
    Serial.printf("%02X", recv_info->src_addr[i]);
    if (i < 5) Serial.print(":");
  }
  Serial.println();
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("ESP32 ESP-NOW RSSI Beacon - Starting...");
  
  // Set device as a Wi-Fi Station and disconnect from any AP
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(100);
  
  // Print MAC address
  Serial.print("Beacon MAC Address: ");
  Serial.println(WiFi.macAddress());
  Serial.println("IMPORTANT: Copy this MAC address to the scanner code!");
  
  // Set maximum WiFi power
  WiFi.setTxPower(WIFI_POWER_19_5dBm);
  
  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  
  Serial.println("ESP-NOW initialized successfully");
  
  // Register callbacks
  esp_now_register_send_cb(OnDataSent);
  esp_now_register_recv_cb(OnDataRecv);
  
  // Register peer (broadcast - works with any receiver)
  esp_now_peer_info_t peerInfo;
  memset(&peerInfo, 0, sizeof(peerInfo));
  memcpy(peerInfo.peer_addr, scanner_mac, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;
  
  // Add broadcast peer        
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add broadcast peer");
  } else {
    Serial.println("Broadcast peer added successfully");
  }
  
  // Initialize beacon data
  strcpy(beacon_data.device_type, "BEACON");
  beacon_data.beacon_id = 1;
  beacon_data.tx_power = 19; // dBm
  
  Serial.println("Beacon ready - Broadcasting for RSSI measurement");
  Serial.println("--------------------------------------------------");
}

void loop() {
  if (millis() - last_send >= send_interval) {
    last_send = millis();
    
    // Update timestamp
    beacon_data.timestamp = millis();
    
    // Send message
    esp_err_t result = esp_now_send(scanner_mac, (uint8_t *) &beacon_data, sizeof(beacon_data));
    
    Serial.print("Beacon ping sent - Time: ");
    Serial.print(beacon_data.timestamp / 1000);
    Serial.print("s - Result: ");
    Serial.println(result == ESP_OK ? "Success" : "Failed");
    
    // Also broadcast for discovery
    uint8_t broadcast_mac[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    esp_now_send(broadcast_mac, (uint8_t *) &beacon_data, sizeof(beacon_data));
  }
  
  delay(100);
}
