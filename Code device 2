#include <esp_now.h>
#include <WiFi.h>
#include <math.h>

#define DEVICE_ID 2
const char* ROLE = "SCANNER";

// === MAC ADDRESSES ===
uint8_t device1_mac[6] = {0x5C, 0x01, 0x3B, 0x74, 0x46, 0x34};
uint8_t anchor3_mac[6] = {0x5C, 0x01, 0x3B, 0x74, 0x7A, 0x44};
uint8_t anchor4_mac[6] = {0x5C, 0x01, 0x3B, 0x74, 0x6C, 0x04};
uint8_t anchor5_mac[6] = {0x5C, 0x01, 0x3B, 0x72, 0x6B, 0xE0};

// === Anchor Coordinates ===
const float anchor3_x = 3.0, anchor3_y = 15.0;
const float anchor4_x = 15.0, anchor4_y = 6.0;
const float anchor5_x = 3.0, anchor5_y = 6.0;

// === Distance and Position ===
float d3 = -1, d4 = -1, d5 = -1;
float estimated_x = 0.0, estimated_y = 0.0;

// === RSSI History Buffers ===
#define RSSI_HISTORY_SIZE 5
int rssi3_history[RSSI_HISTORY_SIZE] = {0};
int rssi4_history[RSSI_HISTORY_SIZE] = {0};
int rssi5_history[RSSI_HISTORY_SIZE] = {0};
int index3 = 0, index4 = 0, index5 = 0;

float averageRSSI(int* buffer) {
  float sum = 0;
  for (int i = 0; i < RSSI_HISTORY_SIZE; i++) {
    sum += buffer[i];
  }
  return sum / RSSI_HISTORY_SIZE;
}

// === Message Structure ===
typedef struct struct_message {
  char device_type[20];
  int device_id;
  unsigned long timestamp;
  int tx_power;
  float x;
  float y;
} struct_message;

struct_message outgoing_msg;
struct_message incoming_msg;

// === RSSI-to-Distance Conversion ===
float distanceFromRSSI(float rssi) {
  int abs_rssi = abs(rssi);
  if (abs_rssi <= 0) return 0.0;
  else if (abs_rssi <= 40) return abs_rssi * (1.0 / 40.0);
  else if (abs_rssi <= 60) return 1.0 + (abs_rssi - 40) * (2.0 / 20.0);
  else if (abs_rssi <= 75) return 3.0 + (abs_rssi - 60) * (4.0 / 15.0);
  else if (abs_rssi <= 85) return 7.0 + (abs_rssi - 75) * (3.0 / 10.0);
  else return 10.0 + (abs_rssi - 85) * 0.3;
}

// === Trilateration ===
void trilaterate(float d1, float d2, float d3) {
  float x = (anchor3_x + anchor4_x + anchor5_x) / 3.0;
  float y = (anchor3_y + anchor4_y + anchor5_y) / 3.0;
  float lr = 0.01;
  int steps = 100;
  for (int i = 0; i < steps; i++) {
    float dx1 = x - anchor3_x, dy1 = y - anchor3_y, dist1 = sqrt(dx1 * dx1 + dy1 * dy1);
    float dx2 = x - anchor4_x, dy2 = y - anchor4_y, dist2 = sqrt(dx2 * dx2 + dy2 * dy2);
    float dx3 = x - anchor5_x, dy3 = y - anchor5_y, dist3 = sqrt(dx3 * dx3 + dy3 * dy3);
    float gx = (dist1 - d1) * (dx1 / (dist1 + 1e-6)) +
               (dist2 - d2) * (dx2 / (dist2 + 1e-6)) +
               (dist3 - d3) * (dx3 / (dist3 + 1e-6));
    float gy = (dist1 - d1) * (dy1 / (dist1 + 1e-6)) +
               (dist2 - d2) * (dy2 / (dist2 + 1e-6)) +
               (dist3 - d3) * (dy3 / (dist3 + 1e-6));
    x -= lr * gx;
    y -= lr * gy;
  }
  estimated_x = x;
  estimated_y = y;
  Serial.printf("üìç Device 2 Position: (%.2f, %.2f)\n", x, y);
}

// === ESP-NOW Callback ===
void OnDataRecv(const esp_now_recv_info *info, const uint8_t *data, int len) {
  memcpy(&incoming_msg, data, sizeof(incoming_msg));
  int rssi = info->rx_ctrl->rssi;

  if (memcmp(info->src_addr, anchor3_mac, 6) == 0) {
    rssi3_history[index3] = rssi;
    index3 = (index3 + 1) % RSSI_HISTORY_SIZE;
    float avg_rssi = averageRSSI(rssi3_history);
    d3 = distanceFromRSSI(avg_rssi);
    Serial.printf("üì∂ Anchor 3 RSSI: %d dBm ‚Üí Avg: %.2f ‚Üí Distance: %.2f meters\n", rssi, avg_rssi, d3);
  }
  else if (memcmp(info->src_addr, anchor4_mac, 6) == 0) {
    rssi4_history[index4] = rssi;
    index4 = (index4 + 1) % RSSI_HISTORY_SIZE;
    float avg_rssi = averageRSSI(rssi4_history);
    d4 = distanceFromRSSI(avg_rssi);
    Serial.printf("üì∂ Anchor 4 RSSI: %d dBm ‚Üí Avg: %.2f ‚Üí Distance: %.2f meters\n", rssi, avg_rssi, d4);
  }
  else if (memcmp(info->src_addr, anchor5_mac, 6) == 0) {
    rssi5_history[index5] = rssi;
    index5 = (index5 + 1) % RSSI_HISTORY_SIZE;
    float avg_rssi = averageRSSI(rssi5_history);
    d5 = distanceFromRSSI(avg_rssi);
    Serial.printf("üì∂ Anchor 5 RSSI: %d dBm ‚Üí Avg: %.2f ‚Üí Distance: %.2f meters\n", rssi, avg_rssi, d5);
  }

  if (d3 > 0 && d4 > 0 && d5 > 0) {
    trilaterate(d3, d4, d5);
    d3 = d4 = d5 = -1;
  }
}

void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {}

void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  WiFi.setTxPower(WIFI_POWER_19_5dBm);

  if (esp_now_init() != ESP_OK) {
    Serial.println("‚ùå ESP-NOW init failed");
    return;
  }

  esp_now_register_recv_cb(OnDataRecv);
  esp_now_register_send_cb(OnDataSent);

  // Add Device 1 as peer
  esp_now_peer_info_t peer = {};
  memcpy(peer.peer_addr, device1_mac, 6);
  peer.channel = 0;
  peer.encrypt = false;
  if (esp_now_add_peer(&peer) != ESP_OK) {
    Serial.println("‚ùå Failed to add peer");
  }

  strcpy(outgoing_msg.device_type, ROLE);
  outgoing_msg.device_id = DEVICE_ID;
  outgoing_msg.tx_power = 19;

  // Pre-fill buffers with -70 dBm for stable startup
  for (int i = 0; i < RSSI_HISTORY_SIZE; i++) {
    rssi3_history[i] = rssi4_history[i] = rssi5_history[i] = -70;
  }
}

void loop() {
  outgoing_msg.timestamp = millis();
  outgoing_msg.x = estimated_x;
  outgoing_msg.y = estimated_y;

  esp_now_send(device1_mac, (uint8_t*)&outgoing_msg, sizeof(outgoing_msg));
  delay(1000);
}
