#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEScan.h>
#include <BLEAdvertisedDevice.h>

double getDistance(int rssi) {
  int txPower = -59;  // RSSI at 1 meter (adjust after calibration)
  double n = 2.0;     // Path-loss exponent
  return pow(10.0, (txPower - rssi) / (10.0 * n));
}

// Target MAC address to track
const char* targetMAC = "5c:01:3b:74:46:34";

class MyAdvertisedDeviceCallbacks : public BLEAdvertisedDeviceCallbacks {
  void onResult(BLEAdvertisedDevice advertisedDevice) {
    String mac = advertisedDevice.getAddress().toString().c_str();
    int rssi = advertisedDevice.getRSSI();

    if (mac.equalsIgnoreCase(targetMAC)) {
      Serial.print("Found target MAC ");
      Serial.print(mac);
      Serial.print(" | RSSI: ");
      Serial.print(rssi);
      Serial.print(" dBm | Estimated Distance: ");
      Serial.print(getDistance(rssi));
      Serial.println(" meters");
    }
  }
};

BLEScan* scanner;

void setup() {
  Serial.begin(115200);
  BLEDevice::init("");
  scanner = BLEDevice::getScan();
  scanner->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  scanner->setActiveScan(true);  // Get RSSI and more data
  scanner->start(5, false);      // Scan for 5 seconds
}

void loop() {
  scanner->start(5, false);  // Restart scanning every 5 seconds
}
