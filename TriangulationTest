#include <esp_now.h>
#include <WiFi.h>
#include <math.h>

// ======== CONFIG ========
#define DEVICE_ID 1
const char* ROLE = "BEACON_ONLY";

// ======== Known Devices ========
uint8_t known_macs[][6] = {
  {0x5C, 0x01, 0x3B, 0x74, 0x46, 0x34}, // Device 1
  {0x5C, 0x01, 0x3B, 0x74, 0x74, 0x1C}, // Device 2
  {0x5C, 0x01, 0x3B, 0x74, 0x7A, 0x44}, // Device 3
  {0x5C, 0x01, 0x3B, 0x74, 0x6C, 0x04}, // Device 4
  {0x5C, 0x01, 0x3B, 0x72, 0x6B, 0xE0}  // Device 5
};
const int known_mac_count = sizeof(known_macs) / sizeof(known_macs[0]);

// Anchor MAC addresses
const uint8_t anchor1_mac[6] = {0x5C, 0x01, 0x3B, 0x74, 0x7A, 0x44}; // Device 3
const uint8_t anchor2_mac[6] = {0x5C, 0x01, 0x3B, 0x74, 0x6C, 0x04}; // Device 4
const uint8_t anchor3_mac[6] = {0x5C, 0x01, 0x3B, 0x72, 0x6B, 0xE0}; // Device 5

// Anchor positions
const float anchor1_x = 0.0, anchor1_y = 0.0;
const float anchor2_x = 13.0, anchor2_y = 4.0;
const float anchor3_x = 5.0, anchor3_y = 12.0;

// Distance tracking
float d1 = -1, d2 = -1, d3 = -1;

float distanceFromRSSI(int rssi) {
  int abs_rssi = abs(rssi);

  if (abs_rssi <= 0) return 0.0;
  else if (abs_rssi <= 40) {
    // Between RSSI 0 and 40 ‚Üí 0 to 1 meter
    return (abs_rssi) * (1.0 / 40.0);
  } else if (abs_rssi <= 60) {
    // Between 40 and 60 ‚Üí 1 to 3 meters
    return 1.0 + (abs_rssi - 40) * (2.0 / 20.0);
  } else if (abs_rssi <= 75) {
    // Between 60 and 75 ‚Üí 3 to 7 meters
    return 3.0 + (abs_rssi - 60) * (4.0 / 15.0);
  } else if (abs_rssi <= 85) {
    // Between 75 and 85 ‚Üí 7 to 10 meters
    return 7.0 + (abs_rssi - 75) * (3.0 / 10.0);
  } else {
    // If for some reason it's below -110, just extrapolate further
    return 10.0 + (abs_rssi - 85) * 0.3;
  }
}



// Message structure
typedef struct struct_message {
  char device_type[20];
  int device_id;
  unsigned long timestamp;
  int tx_power;
} struct_message;

struct_message outgoing_msg;
struct_message incoming_msg;

// ======== MAC Utilities ========
bool isKnownMAC(const uint8_t* mac) {
  for (int i = 0; i < known_mac_count; i++) {
    if (memcmp(mac, known_macs[i], 6) == 0) return true;
  }
  return false;
}

void printMAC(const uint8_t* mac) {
  for (int i = 0; i < 6; i++) {
    Serial.printf("%02X", mac[i]);
    if (i < 5) Serial.print(":");
  }
}

void trilaterate(float d1, float d2, float d3) {
  const float x1 = anchor1_x, y1 = anchor1_y;
  const float x2 = anchor2_x, y2 = anchor2_y;
  const float x3 = anchor3_x, y3 = anchor3_y;

  // Initial guess: center of triangle
  float x = (x1 + x2 + x3) / 3.0;
  float y = (y1 + y2 + y3) / 3.0;

  const float learning_rate = 0.01;
  const int iterations = 100;

  for (int i = 0; i < iterations; i++) {
    // Distances from current estimate to each anchor
    float dx1 = x - x1, dy1 = y - y1;
    float dx2 = x - x2, dy2 = y - y2;
    float dx3 = x - x3, dy3 = y - y3;

    float dist1 = sqrt(dx1 * dx1 + dy1 * dy1);
    float dist2 = sqrt(dx2 * dx2 + dy2 * dy2);
    float dist3 = sqrt(dx3 * dx3 + dy3 * dy3);

    // Gradients
    float grad_x = (dist1 - d1) * (dx1 / (dist1 + 1e-6)) +
                   (dist2 - d2) * (dx2 / (dist2 + 1e-6)) +
                   (dist3 - d3) * (dx3 / (dist3 + 1e-6));

    float grad_y = (dist1 - d1) * (dy1 / (dist1 + 1e-6)) +
                   (dist2 - d2) * (dy2 / (dist2 + 1e-6)) +
                   (dist3 - d3) * (dy3 / (dist3 + 1e-6));

    // Gradient descent step
    x -= learning_rate * grad_x;
    y -= learning_rate * grad_y;
  }

  Serial.printf("üìç Estimated Position (approx): (%.2f, %.2f)\n", x, y);
}


// ======== ESP-NOW Callbacks ========
void OnDataRecv(const esp_now_recv_info *info, const uint8_t *data, int len) {
  if (!isKnownMAC(info->src_addr)) {
    Serial.print("‚ùå Unknown MAC: ");
    printMAC(info->src_addr);
    Serial.println(" ‚Äî Ignored");
    return;
  }

  int rssi = info->rx_ctrl->rssi;
  memcpy(&incoming_msg, data, sizeof(incoming_msg));

  Serial.println(">>> MESSAGE RECEIVED <<<");
  Serial.print("From MAC: ");
  printMAC(info->src_addr);
  Serial.println();
  Serial.printf("Device ID: %d\n", incoming_msg.device_id);
  Serial.printf("Timestamp: %lu ms\n", incoming_msg.timestamp);
  Serial.printf("RSSI: %d dBm\n", rssi);

  float dist = distanceFromRSSI(rssi);

  if (memcmp(info->src_addr, anchor1_mac, 6) == 0) {
    d1 = dist;
    Serial.printf("üì° Anchor 1 distance: %.2f m\n", d1);
  } else if (memcmp(info->src_addr, anchor2_mac, 6) == 0) {
    d2 = dist;
    Serial.printf("üì° Anchor 2 distance: %.2f m\n", d2);
  } else if (memcmp(info->src_addr, anchor3_mac, 6) == 0) {
    d3 = dist;
    Serial.printf("üì° Anchor 3 distance: %.2f m\n", d3);
  }

  if (d1 > 0 && d2 > 0 && d3 > 0) {
    trilaterate(d1, d2, d3);
    d1 = d2 = d3 = -1;  // Reset
  }

  Serial.println("---------------------------------------------");
}

void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("üì§ Sent to ");
  printMAC(mac_addr);
  Serial.print(" ‚Äî Status: ");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "‚úÖ Success" : "‚ùå Failed");
}

// ======== Setup ========
void setup() {
  Serial.begin(115200);
  delay(1000);

  Serial.println("ESP-NOW BEACON DEVICE STARTING...");

  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  WiFi.setTxPower(WIFI_POWER_19_5dBm);

  Serial.print("This device MAC: ");
  Serial.println(WiFi.macAddress());

  if (esp_now_init() != ESP_OK) {
    Serial.println("‚ùå ESP-NOW initialization failed");
    return;
  }

  esp_now_register_recv_cb(OnDataRecv);
  esp_now_register_send_cb(OnDataSent);

  for (int i = 0; i < known_mac_count; i++) {
    if (memcmp(known_macs[i], WiFi.macAddress().c_str(), 6) == 0) continue;

    esp_now_peer_info_t peerInfo = {};
    memcpy(peerInfo.peer_addr, known_macs[i], 6);
    peerInfo.channel = 0;
    peerInfo.encrypt = false;

    if (esp_now_add_peer(&peerInfo) == ESP_OK) {
      Serial.print("‚úÖ Added peer: ");
      printMAC(known_macs[i]);
      Serial.println();
    } else {
      Serial.print("‚ùå Failed to add peer: ");
      printMAC(known_macs[i]);
      Serial.println();
    }
  }

  strcpy(outgoing_msg.device_type, ROLE);
  outgoing_msg.device_id = DEVICE_ID;
  outgoing_msg.tx_power = 19;
}

// ======== Loop ========
unsigned long last_send = 0;
const unsigned long send_interval = 1000;

void loop() {
  if (millis() - last_send >= send_interval) {
    last_send = millis();
    outgoing_msg.timestamp = millis();

    for (int i = 0; i < known_mac_count; i++) {
      if (memcmp(known_macs[i], WiFi.macAddress().c_str(), 6) == 0) continue;

      esp_err_t result = esp_now_send(known_macs[i], (uint8_t*)&outgoing_msg, sizeof(outgoing_msg));
      Serial.print("‚è± Sending to ");
      printMAC(known_macs[i]);
      Serial.print(" ‚Äî Result: ");
      Serial.println(result == ESP_OK ? "‚úÖ Success" : "‚ùå Failed");
    }
  }

  delay(100);
}
